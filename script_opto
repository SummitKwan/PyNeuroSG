import os
import sys
import numpy as np
import pandas as pd
pd.set_option('display.max_columns', None)
import dg2df
import neo
from neo.core import (Block, Segment, ChannelIndex, AnalogSignal, Unit)
import matplotlib as mpl
import matplotlib.pyplot as plt
import standardize_TDT_blk
from standardize_TDT_blk import select_obj_by_attr
import quantities as pq
from signal_align import signal_align_to_evt
import re
import PyNeuroPlot as pnp
import time
from scipy import signal
from PyNeuroPlot import center2edge



# read
dir_tdt_tank  = '/Users/Summit/Documents/neural_data/2016-0712_Dexter_four/Dexter_four-160712-143106'
name_tdt_blocks = ['x_search_beforeopto_071216011', 'x_search_beforeopto_071216012', 'x_search_beforeopto_071216013', 'x_search_beforeopto_071216014', 'x_search_beforeopto_071216015', 'x_search_beforeopto_071216016']
blk = Block()
reader = neo.io.TdtIO(dirname=dir_tdt_tank)
for name_tdt_block in name_tdt_blocks:
    seg = reader.read_segment(blockname=name_tdt_block, sortname='PLX')
    blk.segments.append(seg)



# read dg file
dir_dg  = '/Users/Summit/Documents/neural_data/2016-0712_Dexter_four'
file_dgs = ['x_search_beforeopto_071216011.dg', 'x_search_beforeopto_071216012.dg', 'x_search_beforeopto_071216013.dg', 'x_search_beforeopto_071216014.dg', 'x_search_beforeopto_071216015.dg', 'x_search_beforeopto_071216016.dg']
data_dfs = []
for file_dg in file_dgs:
    path_dg = os.path.join(dir_dg, file_dg)
    data_df = dg2df.dg2df(path_dg)
    data_dfs.append(data_df)
data_df = pd.concat(data_dfs)
data_df = data_df.reset_index(range(len(data_df)))


path_dg = os.path.join(dir_dg, file_dg)
data_df = dg2df.dg2df(path_dg)


# get ts_align
blk_StimOn = []
for i in range(len(data_dfs)):
    print i
    data_df_segment = data_dfs[i]
    id_Obsv = np.array(data_df_segment['obsid'])      # !!! needs to be modified if multiple dg files are read
    tos_StimOn = np.array(data_df_segment['stimon'])  # tos: time of offset
    ts_ObsvOn = select_obj_by_attr(blk.segments[i].events, attr='name', value='sync')[0].times
    ts_StimOn = ts_ObsvOn[np.array(id_Obsv)] + tos_StimOn * pq.ms
    blk_StimOn.append(ts_StimOn)

# align
import signal_align; reload(signal_align); t=time.time(); data_neuro=signal_align.blk_align_to_evt(blk, blk_StimOn, [-0.100, 2.000], type_filter='spiketrains.*', name_filter='.*Code[0-9]', spike_bin_rate=1000); print(time.time()-t)
# group
import signal_align; reload(signal_align); t=time.time(); data_neuro=signal_align.neuro_sort(data_df, ['stimulate_type'], [], data_neuro); print(time.time()-t)
# plot
import PyNeuroPlot as pnp; reload(pnp); t=time.time(); pnp.NeuroPlot(data_neuro, sk_std=0.001); print(time.time()-t)


data_neuro=signal_align.blk_align_to_evt(blk, blk_StimOn, [-0.100, 2.000], type_filter='ana.*', name_filter='LFP.*[1-2]', spike_bin_rate=50)
data_neuro=signal_align.neuro_sort(data_df, ['stimulate_type'], [], data_neuro);
pnp.NeuroPlot(data_neuro, sk_std=0.001);
[spcg_f,spcg_t,spcg] = signal.spectrogram(data_neuro['data'], window=signal.hann(128), nperseg=128, nfft=512,fs=data_neuro['signal_info'][0][2], axis=1, noverlap=112)
spcg_t = np.array(spcg_t) + np.array( data_neuro['ts'][0] )
plt.pcolormesh(spcg_t, spcg_f, np.mean(spcg,axis=0)[:,0,:])
plt.ylim(0,100)

spcg_cdtn = []
for i in range(len(data_neuro['cdtn'])):
    spcg_cdtn.append(np.mean(spcg[data_neuro['cdtn_indx'][data_neuro['cdtn'][i]],:,:,:],axis=0))
clim_max = [np.stack(spcg_cdtn,axis=-1)[:,j,:,:].max() for j in range(2)]
for j in range(2):
    fig = plt.figure(figsize=(16,9))
    fig.canvas.set_window_title('chan_{}'.format(j+1))
    fig.suptitle(data_neuro['grpby'])
    for i in range(len(data_neuro['cdtn'])):
        plt.subplot(2,4,i+1)
        plt.pcolormesh(center2edge(spcg_t), center2edge(spcg_f), spcg_cdtn[i][:,j,:], cmap=plt.get_cmap('inferno'))
        plt.clim(0, clim_max[j])
        if True:
            plt.pcolormesh(center2edge(spcg_t), center2edge(spcg_f), 10*np.log10(spcg_cdtn[i][:, j, :]/clim_max[j]), cmap=plt.get_cmap('inferno'))
            # plt.colorbar()
            plt.clim(-30, 0)
        plt.ylim(0, 100)
        plt.title(data_neuro['cdtn'][i])
        # if i==len(data_neuro['cdtn'])-1:
        #     plt.colorbar()
    plt.get_current_fig_manager().window.raise_()
    plt.show()
